<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Murakumo-san is distributed now</title>
    <link>https://renem2185.github.io/tags/linux/</link>
    <description>Recent content in linux on Murakumo-san is distributed now</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Rene Murakumo</copyright>
    <lastBuildDate>Sat, 16 Mar 2024 16:53:28 +0900</lastBuildDate><atom:link href="https://renem2185.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lisp (Scheme) に入門していたつもりが、いつの間にか WebAssemblyをかじっていた件</title>
      <link>https://renem2185.github.io/posts/chicken2wasm/</link>
      <pubDate>Sat, 16 Mar 2024 16:53:28 +0900</pubDate>
      
      <guid>https://renem2185.github.io/posts/chicken2wasm/</guid>
      <description>何を言っているかわからねーと思うが (ry TL; DR できたものは こちら Brainf*ck インタプリタですね 書いたコードが動くとたのしい 🫠 今回いつも以上に乱文になりそう、</description>
      <content>&lt;p&gt;何を言っているかわからねーと思うが (ry&lt;/p&gt;

  &lt;img src=&#34;https://mi.tsujigoya.net/files/0c6702e2-0117-4256-a3f0-06febc6ef21a&#34;  alt=&#34;ブラウザでなにかが動いてる様子&#34;  class=&#34;left&#34;  /&gt;


&lt;h2 id=&#34;tl-dr&#34;&gt;TL; DR&lt;/h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;できたものは &lt;a href=&#34;https://renem2185.github.io/bf/vectorbfi.html&#34;&gt;こちら&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/Brainfuck&#34;&gt;Brainf*ck&lt;/a&gt; インタプリタですね&lt;/li&gt;
&lt;li&gt;書いたコードが動くとたのしい 🫠&lt;/li&gt;
&lt;li&gt;今回いつも以上に乱文になりそう、ゆるして&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最近の話が上手く飲み込めないときは過去の文脈を遡ろう&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Dockerが分からないなら Chrootから学べばいいじゃない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;モチベと背景&#34;&gt;モチベと背景&lt;/h2&gt;
&lt;p&gt;元はと言えば関数型プログラミングってなんぞや？ ってなってたんですよね。&lt;/p&gt;
&lt;p&gt;もっと言うと、流行りのプログラミング言語はよく
&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%9E%E3%83%AB%E3%83%81%E3%83%91%E3%83%A9%E3%83%80%E3%82%A4%E3%83%A0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E&#34;&gt;「マルチパラダイム」&lt;/a&gt;
だと言われていて、特に関数型プログラミングの機能を部分的に取り入れていて～
って話題になりがちなのですが (要出典)、それ以前の元々の関数型言語ってどんな姿で、
それらはどんなアイデアをもとに書かれていたのだろう？ みたいな。&lt;/p&gt;
&lt;h4 id=&#34;プログラミング言語-lisphttpsjawikipediaorgwikilisp&#34;&gt;プログラミング言語 &lt;a href=&#34;https://ja.wikipedia.org/wiki/LISP&#34;&gt;Lisp&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;del&gt;え？ Haskell? &lt;a href=&#34;https://www.ohmsha.co.jp/book/9784274068850/&#34;&gt;すごいH本&lt;/a&gt;もいま読んでますんで……&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;文 (statement) を使わずとも式 (Expression)
さえあればプログラミングはできてしまうらしい。ただしCとはちょっと違う姿に。
後述。&lt;/p&gt;
&lt;p&gt;数ある Lisp方言の中でも &lt;a href=&#34;https://ja.wikipedia.org/wiki/Scheme&#34;&gt;Scheme&lt;/a&gt;
は変数スコープが工夫されているそうで。&lt;/p&gt;
&lt;p&gt;あと、データ型が緩くて可変長の配列とか構造とかを好き放題いじくれるのやべえなって。&lt;/p&gt;
&lt;h4 id=&#34;chicken-schemehttpswwwcall-ccorg&#34;&gt;&lt;a href=&#34;https://www.call-cc.org/&#34;&gt;Chicken Scheme&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Scheme → C言語 トランスパイラ兼コンパイラ。&lt;/p&gt;
&lt;p&gt;先に述べた不思議な言語をCと組み合わせられると聞いて手を出した次第。&lt;/p&gt;
&lt;h4 id=&#34;brainfck&#34;&gt;Brainf*ck&lt;/h4&gt;
&lt;p&gt;プログラミング言語。読めない。
でも機能が少ない分コンパイラが比較的簡単に書けるらしい。
今回はインタプリタにしたけれど。&lt;/p&gt;
&lt;p&gt;Lispはプログラミング言語 (のコンパイラとか実行環境)
の開発にも適すると風の噂で……&lt;/p&gt;
&lt;p&gt;&lt;del&gt;中々自分で書けなくてひとのコードでデバッグせざるを得なかった&lt;/del&gt;&lt;/p&gt;
&lt;h4 id=&#34;emscriptenhttpsemscriptenorg&#34;&gt;&lt;a href=&#34;https://emscripten.org/&#34;&gt;Emscripten&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;C/C++コードを WebAssembly実行ファイルにコンパイルし、
さらにそれをブラウザで読み込ませるJSのコードまで生成してくれるSDK、なのかな？
後述。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;やっていて感じたこと&#34;&gt;やっていて感じたこと&lt;/h2&gt;
&lt;h4 id=&#34;関数型プログラミング&#34;&gt;関数型プログラミング……？&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; 8bit符号なし整数の範囲からちょっとズレた値を調整する&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;overflow
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;((&amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt; x) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          ((&amp;lt; x &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;x))))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;if文の()内によく &lt;code&gt;x &amp;lt; 0&lt;/code&gt;とかって書いたりしますが、
Lispでは&lt;code&gt;&amp;lt;&lt;/code&gt;とか&lt;code&gt;+&lt;/code&gt;も前置する関数、
ここでは手続き (procedure) と呼ばれるものになるんですね (注1)。&lt;/p&gt;
&lt;p&gt;それと &lt;code&gt;cond&lt;/code&gt;は &amp;ldquo;condition&amp;quot;の略で、switch文みたいな分岐をしてくれる子です。
ただしこれも引数がいっぱいある「手続き」になっていて、
マッチした条件式のあとの式が評価されて返されます。&lt;/p&gt;
&lt;p&gt;また、一度束縛した変数は基本的に不変 (immutable) で、
必要に応じて &lt;code&gt;set!&lt;/code&gt;のような &lt;code&gt;!&lt;/code&gt;マークの付いた手続きで上書きも一応は可能、
くらいのスタンスらしいです (注2)。&lt;/p&gt;
&lt;p&gt;というのもループなどを含めそもそも破壊的変更が必要なシーンが無いんですね
(それこそパフォーマンスの都合でメモリを上書きしたい、とかそんくらいかもしれない)。
例えば再帰呼び出しする関数も、
その関数単体は引数が同じなら同じものが返るやつ、みたいなイメージ？&lt;/p&gt;
&lt;p&gt;他にも、&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E9%81%85%E5%BB%B6%E8%A9%95%E4%BE%A1&#34;&gt;遅延評価&lt;/a&gt;
や&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E7%B6%99%E7%B6%9A%E6%B8%A1%E3%81%97%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB&#34;&gt;継続渡しスタイル&lt;/a&gt;
といったコンセプトが有名らしいです。
前者はちょっとだけ今回も使っています。&lt;/p&gt;
&lt;p&gt;言うまでもない話ではあるのですが、これらもいわゆる「銀の弾丸」ではなく、
ロジックがミスっていれば普通にコケます。上記のコードも、一度に &lt;code&gt;±1&lt;/code&gt;
より大きく増減した数値に対しては思ったように動かないはずです。&lt;/p&gt;
&lt;h4 id=&#34;リスト操作は計算コストが大きめ&#34;&gt;リスト操作は計算コストが大きめ&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;再帰的に参照してるのだからそりゃあそう&lt;/li&gt;
&lt;li&gt;Brainf*ckインタプリタのメモリの実装をベクタに変えたら倍速くらいに
&lt;ul&gt;
&lt;li&gt;これはこれで多分ですが頻繫にヒープメモリを触っていて、
C言語の固定長配列よろしくスタックにものを置く実装より重いのでは
&lt;ul&gt;
&lt;li&gt;もちろん柔軟で便利ではある&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;別の話-特殊なことをしようとするとビルドがちょっと大変かも&#34;&gt;別の話: 特殊なことをしようとするとビルドがちょっと大変かも&lt;/h4&gt;
&lt;p&gt;最初は手元で Schemeのコードを動かしてｷｬｯｷｬしてたんですけれども、
WebAssemblyにしたらインストール不要な形で公開できんじゃね？
と思い立ちあれこれ試していたら丸一日以上溶けました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://wiki.call-cc.org/man/5/Deployment#distributing-compiled-c-files&#34;&gt;参考: SchemeのコードをCのプロジェクトとして扱うチュートリアル&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Schemeのソースファイルを Cのソースファイルに変換するまではいいけれど、
それを Clangでコンパイルさせるには……？？ と
(まぁモジュールのソースコード読めばいいのですけれど、
最終的に今回は依存関係の解決を手動でやっちゃっていたという)。&lt;/p&gt;
&lt;p&gt;Chickenで Emscriptenをやっているひとが中々見つけられず、
唯一見つけた例もモジュールがほぼ不要な
Hello Worldコードだったのでその先は試行錯誤しました。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/bin/ld: /tmp/vectorbfi-b5a9f6.o: in function `f_332&amp;#39;:
vectorbfi.c:(.text+0x926): undefined reference to `C_srfi_2d4_toplevel&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例えばこのエラーは &lt;code&gt;srfi-4&lt;/code&gt;
というモジュールが不足している、という意味なのですが、
シンボルの名前が保持されていたりいなかったりで最初面食らっちゃいました。&lt;/p&gt;
&lt;p&gt;最終的な手順はこちら:
&lt;a href=&#34;https://gist.github.com/renem2185/eb907c6b0f554f95de929420d7d20a77&#34;&gt;https://gist.github.com/renem2185/eb907c6b0f554f95de929420d7d20a77&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ビルドとグルーコードの作成さえできちゃえば、
もう今回のように Hugoと GitHub Pagesでデプロイできちゃいますよと。最高ですね。&lt;/p&gt;
&lt;p&gt;……多分、単に WebAssemblyをやりたいだけだったら Rustとか C++とか、
他に幾らでも選択肢はあるしその方が最適化できるんじゃないかな？&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;雑感&#34;&gt;雑感&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;たのしい (小並感)
&lt;ul&gt;
&lt;li&gt;関数型プログラミングの心がちょっとだけわかった気がします&lt;/li&gt;
&lt;li&gt;いくらか心身の快復を感じました、療養中なんでこんなもんでしょう&lt;/li&gt;
&lt;li&gt;てか正直これ動くと思ってなかったので……&lt;/li&gt;
&lt;li&gt;レガシーっぽい技術も深掘りすると面白い、かも&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;残件&#34;&gt;残件&lt;/h2&gt;
&lt;h4 id=&#34;chickenのクロスコンパイル機能を試す&#34;&gt;Chickenのクロスコンパイル機能を試す&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Chicken側でも Clangのオプションが使えるらしい
&lt;ul&gt;
&lt;li&gt;つまり Scheme → LLVM IR → WASM みたいな手順で楽にコンパイルできるのでは&lt;/li&gt;
&lt;li&gt;Emscriptenに頼らない方が楽という説も&lt;/li&gt;
&lt;li&gt;ついでに WebAssemblyインスタンスのメモリが不足する？ 問題も調べたい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;chickenのffiを試す&#34;&gt;ChickenのFFIを試す&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Scheme視点からCのコードを includeする例は公式サイトにあった&lt;/li&gt;
&lt;li&gt;なんとかして Schemeの関数をWASM側に公開できないかな～？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;brainfckコンパイラは書かないの&#34;&gt;Brainf*ckコンパイラは書かないの？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;気が向いたら&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ここまで来たら他のプログラミング言語も習得できるはず&#34;&gt;ここまで来たら他のプログラミング言語も習得できるはず！&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;そもそも Rustとかの予習を意図していた
&lt;ul&gt;
&lt;li&gt;あとは C++のスマートポインタとかかな&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;脚注&#34;&gt;脚注&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;ここでいう手続き (procedure) はSQLのそれとは別物。大抵何かしら返ってくる。&lt;/li&gt;
&lt;li&gt;実装によるみたい？ &lt;a href=&#34;https://practical-scheme.net/wiliki/wiliki.cgi?Gauche%3Aimmutable%E3%81%AA%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E6%B3%A8%E6%84%8F%E7%82%B9&#34;&gt;参考: Gauche:immutableなデータの注意点&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>Misskey個人サーバを立てたあとの管理みたいな話</title>
      <link>https://renem2185.github.io/posts/after_misskey_startup/</link>
      <pubDate>Thu, 07 Sep 2023 21:03:48 +0900</pubDate>
      
      <guid>https://renem2185.github.io/posts/after_misskey_startup/</guid>
      <description>鯖缶の務め is 何？ はじめに おつかれさまです、村雲です。 ここしばらくは本当に色々あり、Misskeyはよき現実逃避として機能していたかと思われま</description>
      <content>&lt;blockquote&gt;
&lt;p&gt;鯖缶の務め is 何？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;おつかれさまです、村雲です。&lt;/p&gt;
&lt;p&gt;ここしばらくは本当に色々あり、Misskeyはよき現実逃避として機能していたかと思われます。
関わってくださった皆様、いつもありがとうございます。いや本当に。&lt;/p&gt;
&lt;p&gt;辛うじて動ける隙間時間みたいなものをかき集めて自分の個人鯖を構築してからは、
こちらのブログもどきそっちのけでマイクロブログのほうをやっちゃっておりますね。
こちらのほうが私に合っているのでしょうか？&lt;/p&gt;
&lt;p&gt;ともかく、今回は私のできたてほやほやな個人鯖
&lt;a href=&#34;https://mi.tsujigoya.net/&#34;&gt;「つじごや」&lt;/a&gt;
の運用について書いていこうかと。
と言ってもおひとりさま前提の手抜き仕様なんですけど。&lt;/p&gt;
&lt;h2 id=&#34;背景-うちの構成&#34;&gt;背景: うちの構成&lt;/h2&gt;
&lt;p&gt;本編の前に、うちの現環境について軽くさらっていこうかと。&lt;/p&gt;

  &lt;img src=&#34;https://renem2185.github.io/img/misskey_topology_1.png&#34;  alt=&#34;つじごや鯖構成図&#34;  class=&#34;left&#34;  /&gt;


&lt;p&gt;リバースプロキシだけさくらのVPSに置き、残りをオンプレミス (越したばかりの自室) で構築、
両者をWireGuard VPNのトンネルで繋ぐようにしました。&lt;/p&gt;
&lt;p&gt;一応はVのものを自称している以上、
グローバルIPアドレスは隠しておきたいなっていう意図です。&lt;/p&gt;
&lt;h4 id=&#34;vps側&#34;&gt;VPS側&lt;/h4&gt;
&lt;p&gt;さくらのVPSの最安である &lt;code&gt;512M&lt;/code&gt; プランですが、Nginxだけ、かつ今の規模なら余裕そうです。
おかげさまでIPv4 / IPv6両方のグローバルアドレスを持った子が月643JPYです。
お得 (&lt;a href=&#34;#%E6%B3%A8%E9%87%88&#34;&gt;注1&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;それと初めてRocky Linux 9を使いました。
そこそこ新しいパッケージが降ってくるCentOS、みたいな使用感？&lt;/p&gt;
&lt;h4 id=&#34;オンプレ側&#34;&gt;オンプレ側&lt;/h4&gt;
&lt;p&gt;DeskminiっていうミニPCなのですが、以前VMを試していたらちょっと重く感じたので、
より軽量なLinux Container (LXC) とLXDで仮想化しています。
DeskminiというかCPUがちょっと古くて4コア8スレッドなので多分それなんですけれども
(&lt;a href=&#34;#%E6%B3%A8%E9%87%88&#34;&gt;注2&lt;/a&gt;)。&lt;/p&gt;
&lt;p&gt;それとホストOS側・コンテナ側共にディストロはOpenSUSE Tumbleweedにしました。
&lt;del&gt;Btrfsが使えれば何でもいい説はある。&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&#34;ほんへ&#34;&gt;ほんへ&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://log.sda1.net/blog/misskey-advent-2022/&#34;&gt;nexryaiさまのこちらの記事&lt;/a&gt;&lt;/strong&gt;
がたいへん充実しておりますので、ぜひご一読を。&lt;/p&gt;
&lt;p&gt;以下に私の&lt;del&gt;ガバガバ&lt;/del&gt;運用をまとめます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E5%85%AC%E9%96%8B%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E5%AE%89%E5%85%A8%E3%81%AB%E3%81%99%E3%82%8B&#34;&gt;ファイアウォール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%82%92%E5%8F%96%E3%81%A3%E3%81%A6%E3%82%A4%E3%83%B3%E3%82%B7%E3%83%87%E3%83%B3%E3%83%88%E3%81%AB%E5%82%99%E3%81%88%E3%82%8B&#34;&gt;バックアップ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E6%96%B0%E3%81%97%E3%81%8F%E3%81%99%E3%82%8B&#34;&gt;パッケージ更新&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;みたいに分けてみました。&lt;/p&gt;
&lt;h3 id=&#34;1-公開サーバを安全にする&#34;&gt;1. 公開サーバを安全にする&lt;/h3&gt;
&lt;p&gt;セキュリティなんもわからん……&lt;/p&gt;
&lt;p&gt;うちの場合、主に直接外に公開しているVPS側の対策になります。&lt;/p&gt;
&lt;h4 id=&#34;sshポートを外部から隠す&#34;&gt;SSHポートを外部から隠す&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;22/TCP&lt;/code&gt;以外に変更しても &lt;code&gt;/var/log/secure&lt;/code&gt;が埋まりがちだったので、
グローバルIPへ直接SSHしに行くのではなく、トンネルを経由させるようにしました。&lt;/p&gt;
&lt;p&gt;うちだと少々回りくどいですが、
上図のメインPCから一度LXCインスタンスを踏み台にして、
それからトンネルの向こうの鯖に、といった具合に。&lt;/p&gt;
&lt;p&gt;↓ Main PC: &lt;code&gt;~/.ssh/config&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;Host さくらのVPS               # お好きな名前で
    ProxyJump LXCインスタンス   # 別途configに記述
    Port SSHのポート番号        # 22番に戻していない
    Hostname A.B.C.D          # VPSのLAN用アドレス、今回はDummy I/Fを使用
    User ログインユーザ名
    IdentityFile /path/to/鍵_ed25519
    IdentitiesOnly yes
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;そしたらファイアウォールでSSHのポートを塞いじゃいましょう。
Rockyの標準であるFirewalldを使っています。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## さくらのVPSにて
# firewall-cmd --remove-service=ssh --zone=public

## 一時的に塞いでもSSHが途切れないことを確認してから
# firewall-cmd --remove-service=ssh --zone=public --permanent
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;それと&lt;em&gt;&lt;strong&gt;トンネルはトンネルで&lt;/strong&gt;&lt;/em&gt; 公開ポート番号をデフォルトから変更するとか、
時々更新をチェックするとか、必要な対策を施せるとよいかなと。&lt;/p&gt;
&lt;h4 id=&#34;wireguardのログを確認する&#34;&gt;WireGuardのログを確認する&lt;/h4&gt;
&lt;p&gt;デフォルトだと記録されないようですが、
ダイナミックデバッグなるものを有効化することでカーネルリングバッファに出力させて
&lt;code&gt;dmesg&lt;/code&gt;で読めるようになります。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## さくらのVPSにて、設定をする
# echo module wireguard +p &amp;gt; /sys/kernel/debug/dynamic_debug/control

## ログを読む
$ dmesg | grep wireguard  # インターフェース名で絞ってもいいかも
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例えば自分以外の誰かが侵入を試みていたら&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ dmesg | grep wg0 | grep -v Keypair | grep -v 自分の端末のIPアドレス
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;みたいな感じで絞れば気づけるかも？ (まだ観測していない)&lt;/p&gt;
&lt;h4 id=&#34;firewalldでブラックリストを作る&#34;&gt;Firewalldでブラックリストを作る&lt;/h4&gt;
&lt;p&gt;さっきのWireGuardや &lt;code&gt;/var/log/nginx/access.log&lt;/code&gt;などで怪しい履歴を見つけたら、
IPアドレス単位でアクセスを拒否できるようにしましょう。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## さくらのVPSにて、IPv4用のipsetを作成し対象をdropさせる
# firewall-cmd --permanent --new-ipset=blacklist4 --type=hash:ip
# firewall-cmd --permanent --zone=public --add-rich-rule=&amp;#39;rule source ipset=blacklist4 drop&amp;#39;

## IPv6用はこんな感じ
# firewall-cmd --permanent --new-ipset=blacklist6 --type=hash:net --option=family=inet6
# firewall-cmd --permanent --zone=public --add-rich-rule=&amp;#39;rule source ipset=blacklist6 drop&amp;#39;

## ブラックリストへの登録 (IPv6のほうもipsetを合わせるだけ)
# firewall-cmd --permanent --ipset=blacklist4 --add-entry=A.B.C.D
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;selinuxを有効にする&#34;&gt;SELinuxを有効にする&lt;/h4&gt;
&lt;p&gt;これどっちかと言うと構築時の話ですね。
さくらのVPSのスタートアップスクリプトのほうで有効化しちゃったので。&lt;/p&gt;
&lt;p&gt;その場合、sshdやnginxがブロックされてしまわないように
コンテクストやブールをいじってあげる必要があるんですね。&lt;/p&gt;
&lt;p&gt;以下を読みながらなんとかしました。
CentOS用の記事がまんま使えてよきですね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://milestone-of-se.nesuke.com/sv-basic/linux-basic/audit-log-ausearch/&#34;&gt;https://milestone-of-se.nesuke.com/sv-basic/linux-basic/audit-log-ausearch/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tex2e.github.io/blog/selinux/dns-bind-change-port-with-selinux&#34;&gt;https://tex2e.github.io/blog/selinux/dns-bind-change-port-with-selinux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/worthmine/items/2bb6563fece396473ffc&#34;&gt;https://qiita.com/worthmine/items/2bb6563fece396473ffc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-バックアップを取ってインシデントに備える&#34;&gt;2. バックアップを取ってインシデントに備える&lt;/h3&gt;
&lt;p&gt;ことActivityPubサーバに関しては、
DBが吹っ飛ぶと同じドメインネームが使えなくなる仕様があり。
先ほどの図のオンプレ側をいじります。&lt;/p&gt;
&lt;h4 id=&#34;コンテナを丸ごとバックアップする&#34;&gt;コンテナを丸ごとバックアップする&lt;/h4&gt;
&lt;p&gt;LXCのストレージバックエンドでもBtrfsを使わせることで、
スナップショット機能がこれを利用したものになるはずです。多分。&lt;/p&gt;
&lt;p&gt;コンテナの一時停止・スナップショット取得共に時間は掛からず、十数秒のダウンタイムで済みそうです。
ただ、これだけではストレージ破損で逝ってしまうので
(&lt;a href=&#34;#%E6%B3%A8%E9%87%88&#34;&gt;注3&lt;/a&gt;)、&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;スナップショット取得&lt;/li&gt;
&lt;li&gt;スナップショットからイメージを生成&lt;/li&gt;
&lt;li&gt;それを別のSSDにエクスポート&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;までSystemd Timerで毎日実行しています。&lt;/p&gt;
&lt;p&gt;↓ Deskmini: &lt;code&gt;~/work/backup_lxc.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;instance&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$1  &lt;span style=&#34;color:#75715e&#34;&gt;# コマンドラインから渡してね&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;now&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;date +%y%m%d_%H&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/mnt/別のSSD/exported/$instance/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lxc snapshot $instance $now
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lxc publish $instance/$now --alias $instance_$now
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lxc image export $contain_$now $dir
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lxc image delete $contain_$now
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;先日レストア試験で復旧できそうってこともざっくりですが確認が取れました (N=1)。&lt;/p&gt;
&lt;h4 id=&#34;添付ファイルを別途rsyncする&#34;&gt;添付ファイルを別途rsyncする&lt;/h4&gt;
&lt;p&gt;これまたLXDの機能お試しを兼ね、ストレージボリュームなる仮想ディスクをさっきの別SSDの上で作り、
コンテナにattachしています……つまりさっきのコンテナのデータとは別に管理しているんですね。&lt;/p&gt;
&lt;p&gt;コンテナの中からはいつも通りmountしているように見えるので、画像など添付ファイルを置いている
&lt;code&gt;misskey/files/&lt;/code&gt;をシンボリックリンクにしてあげるとその保存先を変えられる訳ですね。&lt;/p&gt;
&lt;p&gt;こちらは将来的に肥大化することも考え、ただの&lt;code&gt;rsync&lt;/code&gt;で別のPCと同期させることにしました。
メインPCのHDDに (比較的) 余裕があったので「たまにうっかり電源切ってて失敗してもええか」
くらいの気分で
(&lt;a href=&#34;#%E6%B3%A8%E9%87%88&#34;&gt;注4&lt;/a&gt;)。
毎晩22時なら起きているでしょう。多分。&lt;/p&gt;
&lt;p&gt;↓ LXC instance: &lt;code&gt;/etc/systemd/system/mi-data-bak.service&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;[Unit]
Description = Backup https://mi.tsujigoya.net/ media files

[Service]
Type = oneshot
User = misskey
Group = misskey
ExecStart = /usr/bin/rsync -auv /mnt/ストレージボリューム/ メインPC:/mnt/d/バックアップ/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;↓ LXC instance: &lt;code&gt;/etc/systemd/system/mi-data-bak.timer&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-conf&#34; data-lang=&#34;conf&#34;&gt;[Unit]
Description = Backup https://mi.tsujigoya.net/ media files

[Timer]
OnCalendar=*-*-* 22:00:00
Persistent=true

[Install]
WantedBy=timers.target
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;rsyncのリモートホスト名には、&lt;code&gt;~/.ssh/config&lt;/code&gt; で設定したものが使えます。
パスワード入力を不要にしておけば簡単に自動化できるという寸法ですね。&lt;/p&gt;
&lt;p&gt;先述のコンテナバックアップも &lt;code&gt;ExecStart&lt;/code&gt;と時間が違うくらい。長いので省略。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-パッケージを新しくする&#34;&gt;3. パッケージを新しくする&lt;/h3&gt;
&lt;p&gt;手動。再起動が必要になったりしますからね。&lt;/p&gt;
&lt;p&gt;まれにニュースサイトやTLで脆弱性や障害について情報が流れてくることもあるので、
それとな～く普段から意識しておくのも良いかもしれません。&lt;/p&gt;
&lt;h4 id=&#34;osのパッケージマネージャで更新をかける&#34;&gt;OSのパッケージマネージャで更新をかける&lt;/h4&gt;
&lt;p&gt;RockyはともかくTumbleweedに関しては、
同じローリングリリースのArch Linuxを1年ほど放置した結果キーイングに失敗して
「あれ鍵の再生成どうやんだっけな～？」
とかいって調べ始める、みたいなあるあるネタがあるのでちょっと用心した方がいいかも。&lt;/p&gt;
&lt;p&gt;なお、OpenSUSEの場合は&lt;code&gt;zypper up&lt;/code&gt;のタイミングで勝手にスナップショットしてくれます。
心臓に優しいですね。&lt;/p&gt;
&lt;h4 id=&#34;misskey側の更新をかける&#34;&gt;Misskey側の更新をかける&lt;/h4&gt;
&lt;p&gt;手動インストールなので &lt;a href=&#34;https://misskey-hub.net/docs/install/manual.html&#34;&gt;https://misskey-hub.net/docs/install/manual.html&lt;/a&gt; の通りですね。&lt;/p&gt;
&lt;p&gt;「Node.jsとかどうやって入れたっけ？」
なんてのも忘れないようメモっておくと後々困らないでしょう。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;今後やりたいこと&#34;&gt;今後やりたいこと&lt;/h2&gt;
&lt;p&gt;先述のとおりだいぶやっつけなもんで……&lt;/p&gt;
&lt;p&gt;例えば今後オンプレ側でMisskey以外のサービスを増やして、
それを同じリバースプロキシで公開するなら、
WireGuardは別のコンテナに分けたほうがよいでしょうね。&lt;/p&gt;
&lt;p&gt;あとストレージが今までそれほど使っていなかった分、
あまり手元に残っていないのでNASが欲しくなってきました。&lt;/p&gt;
&lt;p&gt;サーバの負荷 (ロードアベレージ) やRAMの使用率はかなり余裕があるので、
もし私の体調が良くなったりしたら、
招待制のまま利用者を募って実際にユーザを収容してみるのもいいかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;
&lt;p&gt;思ったより長くなっちゃいましたね。3,000字とか久々に書きました。&lt;/p&gt;
&lt;p&gt;また140字くらいに収まるつぶやきがメインになりそうですが、
たまにはこうしてマイクロじゃないほうのブログをやってみるのも楽しいものですね。
ともかく、これからも気ままにやっていく所存でございますので、どうぞよしなに。&lt;/p&gt;
&lt;p&gt;あっ、よろしければチャンネル登録の代わりに
&lt;a href=&#34;https://renem2185.github.io/posts/links&#34;&gt;SNSのフォロー&lt;/a&gt;をお願いいたします。村雲ルネでした。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2023.09.09 投稿、直後に誤字修正、注釈追加&lt;/p&gt;
&lt;h2 id=&#34;注釈&#34;&gt;注釈&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ぶっちゃけ好み。探せばもっと安いVPSサービスは幾らでもあるはず、
でも「最安プランだとIPv6非対応」なんてのもちょいちょい見かけるような？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当時Deskmini A300に載せられるもので一番良さそうだった Ryzen 5 3400Gという石です。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Btrfsについてはこちらの資料が詳しいです。ソフト的な変更をすぐに巻き戻せるイメージ。
&lt;a href=&#34;https://event.ospn.jp/osc2020-online-spring/session/61353&#34;&gt;https://event.ospn.jp/osc2020-online-spring/session/61353&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;今回WSL2めがけてSSHしているのですけれども、
Windows側でファイアウォールを開けつつnetshでポートフォワーディング……でよかったのかなこれ？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
  </channel>
</rss>
